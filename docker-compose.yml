version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: tosha_postgres
    environment:
      POSTGRES_DB: tosha_tales
      POSTGRES_USER: tosha_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-tosha_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tosha_user -d tosha_tales"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: ./tosha-tales-backend
    container_name: tosha_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://tosha_user:${DB_PASSWORD:-tosha_password_2024}@postgres:5432/tosha_tales
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_2024}
      PORT: 3001
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: info
    volumes:
      - ./tosha-tales-backend/uploads:/app/uploads
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build: ./tosha-tales-haven
    container_name: tosha_frontend
    environment:
      - VITE_API_BASE_URL=http://localhost/api
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx reverse proxy (опционально, для production)
  nginx:
    image: nginx:alpine
    container_name: tosha_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:

networks:
  default:
    name: tosha_network
