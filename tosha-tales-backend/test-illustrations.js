#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π
 * –ó–∞–ø—É—Å–∫: node test-illustrations.js
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testIllustrationsAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã story_illustrations:');
    const tableInfo = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'story_illustrations'
      ORDER BY ordinal_position;
    `;
    console.log('–ö–æ–ª–æ–Ω–∫–∏:', tableInfo);
    console.log('');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π:');
    const illustrations = await prisma.storyIllustration.findMany({
      take: 5,
      select: {
        id: true,
        imageUrl: true,
        position_horizontal: true,
        position_vertical: true,
        caption: true,
        order: true,
        storyId: true
      }
    });
    console.log('–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏:', illustrations);
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:');
    const constraints = await prisma.$queryRaw`
      SELECT constraint_name, constraint_type, check_clause
      FROM information_schema.check_constraints 
      WHERE constraint_schema = 'public' 
      AND constraint_name LIKE '%position%';
    `;
    console.log('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:', constraints);
    console.log('');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:');
    const indexes = await prisma.$queryRaw`
      SELECT indexname, indexdef
      FROM pg_indexes 
      WHERE tablename = 'story_illustrations';
    `;
    console.log('–ò–Ω–¥–µ–∫—Å—ã:', indexes);
    console.log('');

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏:');
    try {
      const testIllustration = await prisma.storyIllustration.create({
        data: {
          imageUrl: 'https://test.com/test-image.jpg',
          position_horizontal: 'right',
          position_vertical: 'bottom',
          caption: '–¢–µ—Å—Ç–æ–≤–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',
          order: 1,
          storyId: 'test-story-id' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–∫–∞–∑–∫–∏
        }
      });
      console.log('‚úÖ –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testIllustration);

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é
      await prisma.storyIllustration.delete({
        where: { id: testIllustration.id }
      });
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testIllustrationsAPI(); 