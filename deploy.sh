#!/bin/bash

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –°–∫–∞–∑–æ–∫ –ø—Ä–æ –ö—Ä–æ–∫–æ–¥–∏–ª–∞ –¢–æ—à–∏..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Docker
check_docker_status() {
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å..."
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker service
        if command -v systemctl &> /dev/null; then
            echo "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º Docker service..."
            sudo systemctl start docker
            sleep 3
            
            if ! docker info &> /dev/null; then
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker service"
                echo "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: sudo systemctl start docker"
                exit 1
            fi
        else
            echo "‚ùå systemctl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é"
            exit 1
        fi
    fi
    
    echo "‚úÖ Docker daemon –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose"
    echo "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: https://docs.docker.com/engine/install/"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose"
    echo "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: https://docs.docker.com/compose/install/"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker daemon
check_docker_status

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if ! docker ps &> /dev/null; then
    echo "‚ö†Ô∏è  –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å Docker –∫–æ–º–∞–Ω–¥—ã"
    echo "üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker..."
    sudo usermod -aG docker $USER
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f .env ]; then
    echo "üìù –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª..."
    cat > .env << EOF
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PASSWORD=tosha_password_2024

# JWT —Å–µ–∫—Ä–µ—Ç (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)
JWT_SECRET=your_super_secret_jwt_key_2024_change_this_in_production

# –î–æ–º–µ–Ω (–¥–ª—è production)
DOMAIN=tosha-tales.ru
EOF
    echo "‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è production!"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è production
if [ ! -d "./ssl" ]; then
    echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    mkdir -p ssl
    echo "‚ö†Ô∏è  –ü–æ–º–µ—Å—Ç–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–∞–ø–∫—É ./ssl/"
    echo "   - tosha-tales.ru.crt (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)"
    echo "   - tosha-tales.ru.key (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á)"
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose down

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if [ "$1" = "--clean" ]; then
    echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker-compose down --rmi all --volumes --remove-orphans
fi

# –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
echo "üî® –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
if [ "$1" = "--production" ]; then
    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤ production —Ä–µ–∂–∏–º–µ —Å Nginx..."
    docker-compose --profile production up -d --build
else
    echo "üîß –ó–∞–ø—É—Å–∫–∞–µ–º –≤ development —Ä–µ–∂–∏–º–µ..."
    docker-compose up -d --build
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "üìã –õ–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    docker-compose logs --tail=50
    exit 1
fi

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if ! docker-compose exec -T postgres pg_isready -U tosha_user -d tosha_tales &> /dev/null; then
    echo "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞. –ñ–¥–µ–º –µ—â–µ..."
    sleep 10
    
    if ! docker-compose exec -T postgres pg_isready -U tosha_user -d tosha_tales &> /dev/null; then
        echo "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        echo "üìã –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
        docker-compose logs postgres
        exit 1
    fi
fi

echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
echo "üóÑÔ∏è  –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if ! docker-compose exec -T backend npx prisma migrate deploy; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π"
    echo "üìã –õ–æ–≥–∏ backend:"
    docker-compose logs backend
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
if curl -f http://localhost:3001/health &> /dev/null; then
    echo "‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
if curl -f http://localhost:3000 &> /dev/null; then
    echo "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
echo "üì± Frontend: https://tosha-tales.ru"
echo "üîß Backend API: https://tosha-tales.ru/api"
echo "üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: localhost:5432"
echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  docker-compose logs -f          # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  docker-compose down             # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ"
echo "  docker-compose restart backend  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend"
echo "  docker-compose exec postgres psql -U tosha_user -d tosha_tales  # –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"
echo ""
echo "üöÄ –î–ª—è production –¥–µ–ø–ª–æ—è:"
echo "  ./deploy.sh --production       # –ó–∞–ø—É—Å–∫ —Å Nginx –∏ SSL"
echo "  ./deploy.sh --clean            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
echo ""
echo "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ .env —Ñ–∞–π–ª–µ –¥–ª—è production!"
echo "‚ö†Ô∏è  –ü–æ–º–µ—Å—Ç–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–∞–ø–∫—É ./ssl/ –¥–ª—è HTTPS"
